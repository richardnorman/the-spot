{"version":3,"sources":["actions.js","constants.js","components/AddSpot/AddSpot.js","components/SignIn/SignIn.js","components/Register/Register.js","components/UpdateSpot/UpdateSpot.js","components/SpotCard/SpotCard.js","components/AddSpotButton/AddSpotButton.js","components/NavBar/NavBar.js","components/Spots/Spots.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["changeCurrentUser","currentUserEmail","type","payload","useStyles","makeStyles","root","maxWidth","media","height","AddSpot","isUpdating","id","name","description","image","coords","dateCreated","currentUser","useSelector","state","modifySpotList","spotList","classes","useDispatch","useState","spotName","setSpotName","spotDescription","setSpotDescription","spotLocation","setSpotLocation","useCurrentLocation","setUseCurrentLocation","spotImage","setSpotImage","locationFound","position","latitude","longitude","locationError","error","alert","className","Card","CardMedia","CardContent","Button","onClick","_","prompt","variant","TextField","label","onChange","event","target","value","FormControlLabel","control","Switch","checked","navigator","geolocation","getCurrentPosition","color","to","style","textDecoration","Fab","disabled","fetch","method","headers","body","JSON","stringify","title","then","response","json","catch","err","console","log","SignIn","signInEmail","setSignInEmail","signInPassword","setSignInPassword","history","useHistory","dispatch","initialValues","email","password","onSubmit","values","a","status","push","Register","registerName","setRegisterName","registerEmail","setRegisterEmail","registerPassword","setRegisterPassword","registered","setRegistered","UpdateSpot","query","URLSearchParams","window","location","search","get","SpotCard","CardActionArea","Typography","gutterBottom","component","CardActions","href","size","theme","extendedIcon","marginRight","spacing","AddSpotButton","flexGrow","menuButton","display","breakpoints","up","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","NavBar","drawerOpen","setDrawerOpen","AppBar","background","Toolbar","IconButton","edge","aria-label","noWrap","InputBase","placeholder","input","inputProps","Drawer","anchor","open","onClose","paddingRight","cursor","Spots","searchText","changeSearch","useEffect","data","setSpotList","DisplaySpots","props","list","length","textAlign","marginTop","fontSize","map","spot","undefined","filter","toLowerCase","includes","App","exact","path","Boolean","hostname","match","findObjectByTitleReturnIndex","object","index","initialStateSpotList","initialSearchText","initialCurrentUser","persistedState","serializedState","localStorage","getItem","parse","e","loadFromLocalStorage","rootReducer","combineReducers","action","updatedList","updateAtIndex","removedList","removeAtIndex","splice","store","createStore","composeWithDevTools","subscribe","setItem","saveToLocalStorage","getState","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"2cA4CaA,EAAoB,SAAAC,GAC7B,MAAO,CACHC,KC1C2B,sBD2C3BC,QAASF,IEzBXG,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,OAEdC,MAAO,CACHC,OAAQ,OAgJDC,EA5IC,SAAC,GAA2G,IAAD,IAAzGC,kBAAyG,aAArFC,UAAqF,MAAhF,GAAgF,MAA5EC,YAA4E,MAArE,GAAqE,MAAjEC,mBAAiE,MAAnD,GAAmD,MAA/CC,aAA+C,MAAvC,GAAuC,MAAnCC,cAAmC,MAA1B,GAA0B,MAAtBC,mBAAsB,MAAR,GAAQ,EAEjHC,GADWC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAeC,YACvCH,aAAY,SAAAC,GAAK,OAAIA,EAAMpB,kBAAkBC,qBAE3DsB,GADWC,cACDpB,KAJuG,EAMvFqB,mBAASZ,GAN8E,mBAMhHa,EANgH,KAMtGC,EANsG,OAOzEF,mBAASX,GAPgE,mBAOhHc,EAPgH,KAO/FC,EAP+F,OAQ/EJ,mBAAST,GARsE,mBAQhHc,EARgH,KAQlGC,EARkG,OASnEN,oBAAS,GAT0D,mBAShHO,EATgH,KAS5FC,EAT4F,OAUrFR,mBAASV,GAV4E,mBAUhHmB,EAVgH,KAUrGC,EAVqG,KAgCvH,SAASC,EAAcC,GACnBN,EAAgB,GAAD,OAAIM,EAASrB,OAAOsB,SAApB,aAAiCD,EAASrB,OAAOuB,YAGpE,SAASC,EAAcC,GACnBC,MAAM,0DAA4DD,GAGtE,OACI,yBAAKE,UAAU,QACX,yBAAKA,UAAU,iBACX,kBAACC,EAAA,EAAD,CAAMD,UAAWpB,EAAQjB,MACjB,kBAACuC,EAAA,EAAD,CACIF,UAAWpB,EAAQf,MACnBO,MAAqB,KAAdmB,EAAmB,0EAA4EA,IAE1G,kBAACY,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAQC,QArCE,SAAAC,GAC1Bd,EAAae,OAAO,qBAAuB,KAoCaP,UAAU,mBAAmBQ,QAAQ,aAAcxC,EAAa,aAAe,aACnH,kBAACyC,EAAA,EAAD,CAAWT,UAAU,SAAS/B,GAAG,iBAAiByC,MAAM,OAAOC,SAAW,SAAAC,GAAK,OAAI5B,EAAY4B,EAAMC,OAAOC,QAASA,MAAO/B,IAC5H,kBAAC0B,EAAA,EAAD,CAAWT,UAAU,SAAS/B,GAAG,iBAAiByC,MAAM,cAAcC,SAAW,SAAAC,GAAK,OAAI1B,EAAmB0B,EAAMC,OAAOC,QAASA,MAAO7B,IAExIjB,EAAa,KACX,kBAAC,WAAD,KACA,kBAAC+C,EAAA,EAAD,CACAf,UAAU,sBACVgB,QACI,kBAACC,EAAA,EAAD,CACI/C,KAAK,WACLgD,QAAS7B,EACTsB,SA7CI,SAAAL,GAChCjB,GAEAD,EAAgB,IAChBE,GAAsB,KAGtBA,GAAsB,GAM1B6B,UAAUC,YAAYC,mBAAmB5B,EAAeI,KAiCxByB,MAAM,YAGVZ,MAAM,yBAELrB,EACG,KACA,kBAACoB,EAAA,EAAD,CACAT,UAAU,SACV/B,GAAG,iBACHyC,MAAM,WACNC,SAAU,SAAAC,GAAK,OAAIxB,EAAgBwB,EAAMC,OAAOC,cAM5E,kBAAC,IAAD,CAAMS,GAAG,aAAaC,MAAO,CAAEC,eAAgB,SAC3C,kBAACC,EAAA,EAAD,CAAKC,SAAwB,KAAb5C,GAAoC,KAAjBI,EAAqCkB,QAAS,WAC1ErC,EACC4D,MAAM,gDAAD,OAAiDrD,GAAe,CACjEsD,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBhE,GAAIA,EACJiE,MAAOnD,EACPZ,YAAac,EACbb,MAAqB,KAAdmB,EAAmB,0EAA4EA,EACtGlB,OAAQc,EACRb,YAAaA,MAGpB6D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAGtBX,MAAM,6CAAD,OAA8CrD,GAAe,CAC9DsD,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,MAAOnD,EACPZ,YAAac,EACbb,MAAqB,KAAdmB,EAAmB,0EAA4EA,EACtGlB,OAAQc,MAGfgD,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAIjCjB,MAAM,UAAUtB,UAAU,cAAcQ,QAAQ,YAjCrD,SAqCFxC,EACE,kBAAC,IAAD,CAAMuD,GAAG,aAAaC,MAAO,CAAEC,eAAgB,SAC3C,kBAACrB,EAAA,EAAD,CAAQJ,UAAU,qBAAqBK,QAAS,WACxCuB,MAAM,gDAAD,OAAiDrD,GAAe,CACjEsD,OAAQ,SACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBhE,GAAIA,MAGXkE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAG9BjB,MAAM,aAZV,gBAgBN,O,iCCxFCoB,G,MAhEA,SAAApC,GAAM,IAAD,EACsBxB,mBAAS,IAD/B,mBACT6D,EADS,KACIC,EADJ,OAE4B9D,mBAAS,IAFrC,mBAET+D,EAFS,KAEOC,EAFP,KAGVC,EAAUC,cACVC,EAAWpE,cAuBjB,OACI,yBAAKmB,UAAU,oBACX,kBAACC,EAAA,EAAD,CAAMD,UAAU,eACZ,kBAACG,EAAA,EAAD,KACI,uCACA,kBAAC,IAAD,CACI+C,cAAe,CACXC,MAAO,GACPC,SAAU,IAEdC,SAAQ,uCAAE,WAAMC,GAAN,SAAAC,EAAA,+EAAgBxD,MAAMiC,KAAKC,UAAUqB,KAArC,2CAAF,uDAER,kBAAC,IAAD,KACI,kBAAC7C,EAAA,EAAD,CAAWT,UAAU,2BAA2B/B,GAAG,iBAAiByC,MAAM,QAAQnD,KAAK,QAAQoD,SAAU,SAAAC,GAAK,OAAIgC,EAAehC,EAAMC,OAAOC,UAC9I,kBAACL,EAAA,EAAD,CAAWT,UAAU,2BAA2B/B,GAAG,iBAAiByC,MAAM,WAAWnD,KAAK,WAAWoD,SAAU,SAAAC,GAAK,OAAIkC,EAAkBlC,EAAMC,OAAOC,UACvJ,yBAAKd,UAAU,0BACX,6BAEQ,kBAAC0B,EAAA,EAAD,CAAKrB,QAvCpB,SAAAC,GACjBsB,MAAM,2CAA4C,CAC9CC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBkB,MAAOR,EACPS,SAAUP,MAGjBV,MAAK,SAAAC,GACCA,EAASoB,OAAS,KAEjBP,EAAS5F,EAAkBsF,IAC3BI,EAAQU,KAAK,cAEb1D,MAAM,0DAGbuC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAqBkCjB,MAAM,UAAUtB,UAAU,qBAAqBQ,QAAQ,YAAnF,YAKR,6BACI,kBAAC,IAAD,CAAMe,GAAG,qBAAqBC,MAAO,CAAEC,eAAgB,OAAQH,MAAO,UAClE,iDCYzBoC,EApEE,SAAApD,GAAM,IAAD,EACsBxB,mBAAS,IAD/B,mBACX6E,EADW,KACGC,EADH,OAEwB9E,mBAAS,IAFjC,mBAEX+E,EAFW,KAEIC,EAFJ,OAG8BhF,mBAAS,IAHvC,mBAGXiF,EAHW,KAGOC,EAHP,OAIkBlF,oBAAS,GAJ3B,mBAIXmF,EAJW,KAICC,EAJD,KAKFlB,cAsBhB,OACI,yBAAKhD,UAAU,oBACbiE,EACF,qGACA,kBAAChE,EAAA,EAAD,CAAMD,UAAU,eACZ,kBAACG,EAAA,EAAD,KACI,wCACA,kBAAC,IAAD,CACI+C,cAAe,CACXC,MAAO,GACPC,SAAU,IAEdC,SAAQ,uCAAE,WAAMC,GAAN,SAAAC,EAAA,+EAAgBxD,MAAMiC,KAAKC,UAAUqB,KAArC,2CAAF,uDAER,kBAAC,IAAD,KACI,kBAAC7C,EAAA,EAAD,CAAWT,UAAU,2BAA2B/B,GAAG,iBAAiByC,MAAM,OAAOnD,KAAK,OAAOoD,SAAU,SAAAC,GAAK,OAAIgD,EAAgBhD,EAAMC,OAAOC,UAC7I,kBAACL,EAAA,EAAD,CAAWT,UAAU,2BAA2B/B,GAAG,iBAAiByC,MAAM,QAAQnD,KAAK,QAAQoD,SAAU,SAAAC,GAAK,OAAIkD,EAAiBlD,EAAMC,OAAOC,UAChJ,kBAACL,EAAA,EAAD,CAAWT,UAAU,2BAA2B/B,GAAG,iBAAiByC,MAAM,WAAWnD,KAAK,WAAYoD,SAAU,SAAAC,GAAK,OAAIoD,EAAoBpD,EAAMC,OAAOC,UAC1J,yBAAKd,UAAU,0BACX,6BAEQ,kBAAC0B,EAAA,EAAD,CAAKrB,QAzCd,SAAAC,GACnBsB,MAAM,4CAA6C,CAC/CC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjB/D,KAAMyF,EACNR,MAAOU,EACPT,SAAUW,MAGjB5B,MAAK,SAAAC,GACCA,EAASoB,OAAS,IACjBU,GAAc,GAEdnE,MAAM,uDAGbuC,OAAM,SAAAC,GAAG,OAAIxC,MAAM,+BAwBsCuB,MAAM,UAAUtB,UAAU,qBAAqBQ,QAAQ,YAArF,aAKR,6BACI,kBAAC,IAAD,CAAMe,GAAG,oBAAoBC,MAAO,CAAEC,eAAgB,OAAQH,MAAO,UACjE,+CC1CrB6C,G,OAhBI,WACf,IAAMC,EAAQ,IAAIC,gBAAgBC,OAAOC,SAASC,QAC5CvG,EAAKmG,EAAMK,IAAI,OAAS,GACxBvG,EAAOkG,EAAMK,IAAI,SAAW,GAC5BtG,EAAciG,EAAMK,IAAI,gBAAkB,GAC1CrG,EAAQgG,EAAMK,IAAI,UAAY,GAC9BpG,EAAS+F,EAAMK,IAAI,WAAa,GAChCnG,EAAc8F,EAAMK,IAAI,gBAAkB,GAEhD,OACI,6BACI,kBAAC,EAAD,CAASxG,GAAIA,EAAIC,KAAMA,EAAMC,YAAaA,EAAaC,MAAOA,EAAOC,OAAQA,EAAQC,YAAaA,EAAaN,YAAY,O,2BCNjIP,G,OAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,QAEdC,MAAO,CACHC,OAAQ,QAmCD4G,EA/BE,SAAC,GAAqF,IAAD,IAAlFzG,UAAkF,MAA7E,GAA6E,MAAzEiE,aAAyE,MAAjE,GAAiE,MAA7D/D,mBAA6D,MAA/C,GAA+C,MAA3CC,aAA2C,MAAnC,GAAmC,EAA/BC,EAA+B,EAA/BA,OAA+B,IAAvBC,mBAAuB,MAAT,GAAS,EAC5FM,EAAUnB,IACVsF,EAAUC,cAEhB,OACI,yBAAK3C,QAAS,WAAO0C,EAAQU,KAAR,mCAAyCxF,EAAzC,iBAAoDiE,EAApD,wBAAyE/D,EAAzE,kBAA8FC,EAA9F,mBAA8GC,EAA9G,wBAAoIC,KAAiB0B,UAAU,kBAChL,kBAACC,EAAA,EAAD,CAAMD,UAAWpB,EAAQjB,MACrB,kBAACgH,EAAA,EAAD,KACI,kBAACzE,EAAA,EAAD,CACIF,UAAWpB,EAAQf,MACnBO,MAAOA,IAEX,kBAAC+B,EAAA,EAAD,KACI,kBAACyE,EAAA,EAAD,CAAYC,cAAY,EAACrE,QAAQ,KAAKsE,UAAU,MAC3C5C,GAEL,kBAAC0C,EAAA,EAAD,CAAYpE,QAAQ,QAAQc,MAAM,gBAAgBwD,UAAU,KACvD3G,KAIb,kBAAC4G,EAAA,EAAD,KACI,kBAAC3E,EAAA,EAAD,CAAQS,OAAO,SAASmE,KAAI,4CAAuC3G,GAAU4G,KAAK,QAAQ3D,MAAM,WAAhG,qB,iBCrCd7D,G,OAAYC,aAAW,SAACwH,GAAD,MAAY,CACrCC,aAAc,CACZC,YAAaF,EAAMG,QAAQ,SAclBC,EAVO,SAAAhF,GAClB,IAAM1B,EAAUnB,IAChB,OACI,kBAACiE,EAAA,EAAD,CAAK1B,UAAU,oBAAoBQ,QAAQ,YACvC,kBAAC,IAAD,CAASR,UAAWpB,EAAQuG,eADhC,e,+FCAF1H,EAAYC,aAAW,SAACwH,GAAD,MAAY,CACrCvH,KAAM,CACJ4H,SAAU,GAEZC,WAAY,CACVJ,YAAaF,EAAMG,QAAQ,IAE7BnD,MAAM,aACJqD,SAAU,EACVE,QAAS,QACRP,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BF,QAAS,UAGbjB,OAAO,aACL9E,SAAU,WACVkG,aAAcV,EAAMW,MAAMD,aAC1BE,gBAAiBC,YAAKb,EAAMc,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACTJ,gBAAiBC,YAAKb,EAAMc,QAAQC,OAAOC,MAAO,MAEpDC,WAAY,EACZC,MAAO,QACNlB,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BQ,WAAYjB,EAAMG,QAAQ,GAC1Be,MAAO,SAGXC,WAAY,CACVC,QAASpB,EAAMG,QAAQ,EAAG,GAC1BvH,OAAQ,OACR4B,SAAU,WACV6G,cAAe,OACfd,QAAS,OACTe,WAAY,SACZC,eAAgB,UAElBC,UAAW,CACTpF,MAAO,WAETqF,WAAW,aACTL,QAASpB,EAAMG,QAAQ,EAAG,EAAG,EAAG,GAEhCuB,YAAY,cAAD,OAAgB1B,EAAMG,QAAQ,GAA9B,OACXwB,WAAY3B,EAAM4B,YAAYC,OAAO,SACrCX,MAAO,QACNlB,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BS,MAAO,OACP,UAAW,CACTA,MAAO,cAwDFY,EAlDA,WACX,IAAMpI,EAAUnB,IADC,EAEmBqB,oBAAS,GAF5B,mBAEVmI,EAFU,KAEEC,EAFF,KAGXjE,EAAWpE,cAMjB,OACI,kBAAC,WAAD,KACQ,kBAACsI,EAAA,EAAD,CAAQ3F,MAAO,CAAC4F,WAAY,QAAS9F,MAAO,SAAW5B,SAAS,UAChE,kBAAC2H,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLvH,UAAWpB,EAAQ4G,WACnBlE,MAAM,UACNkG,aAAW,cACXnH,QAAS,kBAAmB6G,GAAbD,KAEf,kBAAC,IAAD,OAEJ,kBAACrC,EAAA,EAAD,CAAY5E,UAAWpB,EAAQsD,MAAO1B,QAAQ,KAAKiH,QAAM,GAAzD,YAGA,yBAAKzH,UAAWpB,EAAQ4F,QACpB,yBAAKxE,UAAWpB,EAAQyH,YACxB,kBAAC,IAAD,OAEA,kBAACqB,EAAA,EAAD,CACAC,YAAY,oBACZ/I,QAAS,CACLjB,KAAMiB,EAAQ8H,UACdkB,MAAOhJ,EAAQ+H,YAEnBkB,WAAY,CAAE,aAAc,UAC5BlH,SA/BW,SAAAC,GACvBqC,ERtCG,CACH1F,KCtCqB,gBDuCrBC,QQoCsBoD,EAAMC,OAAOC,cAmC/B,kBAACgH,EAAA,EAAD,CAAQC,OAAQ,OAAQC,KAAMf,EAAYgB,QAAS,kBAAMf,GAAc,KACnE,kBAAC,IAAD,CAAM7G,QAAS,WAAQ4C,EAAS5F,EAAkB,MAAQkE,GAAG,oBAAoBC,MAAO,CAACC,eAAgB,OAAQH,MAAO,UACpH,wBAAIE,MAAO,CAACoF,YAAa,OAAQsB,aAAc,OAAQC,OAAQ,YAA/D,gBCpDLC,EArDD,SAAA9H,GACV,IAAM3B,EAAWH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAeC,YACrD0J,EAAa7J,aAAY,SAAAC,GAAK,OAAIA,EAAM6J,aAAaD,cACrD9J,EAAcC,aAAY,SAAAC,GAAK,OAAIA,EAAMpB,kBAAkBC,oBAC3DyF,EAAUC,cACVC,EAAWpE,cAEjB0J,qBAAU,WACJhK,IACFiE,QAAQC,IAAI,oDACTM,GACDA,EAAQU,KAAK,sBAEdlF,GACDqD,MAAM,8CAAD,OAA+CrD,IACnD4D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAqG,GACJvF,ETKiB,SAAAtE,GACvB,MAAO,CACHpB,KC3BqB,gBD4BrBC,QAASmB,GSRE8J,CAAYD,OAEtBlG,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SAI9B,IAAMmG,EAAe,SAAAC,GACjB,OAA0B,IAAtBA,EAAMC,KAAKC,OACJ,uBAAGrH,MAAO,CAAEsH,UAAW,SAAUC,UAAW,MAAOC,SAAU,WAA7D,mBAAyF,kBAAC,IAAD,CAAMzH,GAAG,qBAAqBC,MAAO,CAAEF,MAAO,UAAW,kDAClJqH,EAAMC,KAAKC,OAAS,EACpBF,EAAMC,KAAKK,KAAI,SAAAC,GAClB,OACI,kBAAC,EAAD,CAAUjL,GAAIiL,EAAKjL,GAAIiE,MAAOgH,EAAKhH,MAAO/D,YAAa+K,EAAK/K,YAAaC,MAAO8K,EAAK9K,MAAOC,OAAQ6K,EAAK7K,OAAQC,YAAa4K,EAAK5K,iBAIpI,MAIf,OACI,6BACI,kBAAC,EAAD,MACA,uBAAG0B,UAAU,gBAAb,kBACA,yBAAK/B,GAAG,aAAa+B,UAA+B,IAApBrB,EAASkK,OAAe,GAAK,cACxC,KAAfR,QAAoCc,IAAfd,EACnB,kBAACK,EAAD,CAAcE,KAAMjK,IACpB,kBAAC+J,EAAD,CAAcE,KAAMjK,EAASyK,QAAO,SAAAF,GAChC,OAAQA,EAAKhH,MAAMmH,cAAcC,SAASjB,EAAWgB,gBAAkBH,EAAK/K,YAAYkL,cAAcC,SAASjB,EAAWgB,qBAGtI,kBAAC,IAAD,CAAM9H,GAAG,sBAAqB,kBAAC,EAAD,SC3C3B,SAASgI,IACpB,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,yBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,qBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,SClBMC,QACW,cAA7BpF,OAAOC,SAASoF,UAEe,UAA7BrF,OAAOC,SAASoF,UAEhBrF,OAAOC,SAASoF,SAASC,MACvB,2D,wCCPAC,GAA+B,SAACjB,EAAMkB,GACxC,IADmD,EAC/CC,EAAQ,EADuC,eAElCnB,GAFkC,IAEnD,2BAAuB,CACnB,GADmB,QACX1G,QAAU4H,EAAO5H,MACrB,MAGA6H,KAP2C,8BAUnD,OAAOA,GAGLC,GAAuB,CACzBrL,SAAU,IAwBRsL,GAAoB,CACtB5B,WAAY,IAYV6B,GAAqB,CACvB5M,iBAAkB,I,SCrDhB6M,GAeN,WAEE,IACE,IAAMC,EAAkBC,aAAaC,QAAQ,SAG7C,GAAwB,OAApBF,EAA0B,OAC9B,OAAOpI,KAAKuI,MAAMH,GAClB,MAAOI,GAEP,YADAhI,QAAQC,IAAI+H,IAxBOC,GAEjBC,GAAcC,2BAAgB,CAACjM,eDgBP,WAA2C,IAA1CD,EAAyC,uDAAjCuL,GAAsBY,EAAW,uCACpE,OAAQA,EAAOrN,MACX,IX9BgB,WW+BZ,OAAO,6BAAIkB,GAAX,IAAkBE,SAAS,CAAEiM,EAAOpN,SAAV,oBAAsBiB,EAAME,aAC1D,IX9BmB,cW+Bf,IAAIkM,EAAcpM,EAAME,SAClBmM,EAAgBjB,GAA6BpL,EAAME,SAAUiM,EAAOpN,SAE1E,OADAqN,EAAYC,GAAiBF,EAAOpN,QAC7B,6BAAIiB,GAAX,IAAkBE,SAAUkM,IAChC,IXlCmB,cWmCf,IAAIE,EAActM,EAAME,SAClBqM,EAAgBnB,GAA6BpL,EAAME,SAAUiM,EAAOpN,SAE1E,OADAuN,EAAYE,OAAOD,EAAe,GAC3B,6BAAIvM,GAAX,IAAkBE,SAAUoM,IAChC,IXrCqB,gBWsCjB,OAAO,6BAAItM,GAAX,IAAkBE,SAAUiM,EAAOpN,UACvC,QACI,OAAOiB,ICjCkC6J,aDyCzB,WAAwC,IAAvC7J,EAAsC,uDAA9BwL,GAAmBW,EAAW,uCAC/D,OAAQA,EAAOrN,MACX,IXtDqB,gBWuDjB,OAAO,6BAAIkB,GAAX,IAAkB4J,WAAYuC,EAAOpN,UACzC,QACI,OAAOiB,IC9CgDpB,kBDsDlC,WAAyC,IAAxCoB,EAAuC,uDAA/ByL,GAAoBU,EAAW,uCACrE,OAAQA,EAAOrN,MACX,IXhE2B,sBWiEvB,OAAO,6BAAIkB,GAAX,IAAkBnB,iBAAkBsN,EAAOpN,UAC/C,QACI,OAAOiB,MC1DbyM,GAAQC,uBAAYT,GAAaP,GAAgBiB,kCA2BvDF,GAAMG,WAAU,kBAzBhB,SAA4B5M,GAE1B,IACE,IAAM2L,EAAkBpI,KAAKC,UAAUxD,GACvC4L,aAAaiB,QAAQ,QAASlB,GAC9B,MAAOI,GACPhI,QAAQC,IAAI+H,IAmBMe,CAAmBL,GAAMM,eAE/CC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,EAAD,OAEFS,SAASC,eAAe,SFqFpB,kBAAmBzK,WACrBA,UAAU0K,cAAcC,MACrB3J,MAAK,SAAA4J,GACJA,EAAaC,gBAEd1J,OAAM,SAAAxC,GACL0C,QAAQ1C,MAAMA,EAAMmM,a","file":"static/js/main.784828be.chunk.js","sourcesContent":["import {\r\n    ADD_SPOT, \r\n    CHANGE_SEARCH, \r\n    UPDATE_SPOT, \r\n    REMOVE_SPOT, \r\n    CHANGE_CURRENT_USER,\r\n    SET_SPOT_LIST\r\n} from './constants';\r\n\r\nexport const addSpot = spot => {\r\n    return {\r\n        type: ADD_SPOT,\r\n        payload: spot\r\n    }\r\n}\r\n\r\nexport const updateSpot = spot => {\r\n    return {\r\n        type: UPDATE_SPOT,\r\n        payload: spot\r\n    }\r\n}\r\n\r\nexport const removeSpot = spot => {\r\n    return {\r\n        type: REMOVE_SPOT,\r\n        payload: spot\r\n    }\r\n}\r\n\r\nexport const setSpotList = spotList => {\r\n    return {\r\n        type: SET_SPOT_LIST,\r\n        payload: spotList\r\n    }\r\n}\r\n\r\nexport const changeSearch = searchText => {\r\n    return {\r\n        type: CHANGE_SEARCH,\r\n        payload: searchText\r\n    }\r\n}\r\n\r\nexport const changeCurrentUser = currentUserEmail => {\r\n    return {\r\n        type: CHANGE_CURRENT_USER,\r\n        payload: currentUserEmail\r\n    }\r\n}","export const ADD_SPOT = 'ADD_SPOT';\r\nexport const CHANGE_SEARCH = 'CHANGE_SEARCH';\r\nexport const UPDATE_SPOT = 'UPDATE_SPOT';\r\nexport const REMOVE_SPOT = 'REMOVE_SPOT';\r\nexport const CHANGE_CURRENT_USER = 'CHANGE_CURRENT_USER';\r\nexport const SET_SPOT_LIST = 'SET_SPOT_LIST';","import React, { Fragment, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport './AddSpot.css';\r\nimport App from '../../App';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { addSpot, updateSpot, removeSpot } from '../../actions';\r\nimport {\r\n    ADD_SPOT\r\n} from '../../constants';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '90%',\r\n    },\r\n    media: {\r\n        height: 200,\r\n    },\r\n});\r\n\r\nconst AddSpot = ({isUpdating = false, id = '', name = '', description = '', image = '', coords = '', dateCreated = ''}) => {\r\n    const spotList = useSelector(state => state.modifySpotList.spotList);\r\n    const currentUser = useSelector(state => state.changeCurrentUser.currentUserEmail);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const [spotName, setSpotName] = useState(name);\r\n    const [spotDescription, setSpotDescription] = useState(description);\r\n    const [spotLocation, setSpotLocation] = useState(coords);\r\n    const [useCurrentLocation, setUseCurrentLocation] = useState(false);\r\n    const [spotImage, setSpotImage] = useState(image);\r\n\r\n    const handleAddImageClicked = _ => {\r\n        setSpotImage(prompt('Enter image URL:') || '');\r\n    }\r\n\r\n    const handleUseCurrentLocationChanged = _ => {\r\n        if (useCurrentLocation) {\r\n            //dont use current location and reset the current spot location\r\n            setSpotLocation('');\r\n            setUseCurrentLocation(false);\r\n        } else {\r\n            //use the users current location\r\n            setUseCurrentLocation(true);\r\n            getCurrentLocation();\r\n        }\r\n    }\r\n\r\n    function getCurrentLocation() {\r\n        navigator.geolocation.getCurrentPosition(locationFound, locationError);\r\n    }\r\n\r\n    function locationFound(position) {\r\n        setSpotLocation(`${position.coords.latitude}, ${position.coords.longitude}`);\r\n    }\r\n\r\n    function locationError(error) {\r\n        alert('Location can not be found, try connecting to a network.' + error);\r\n    }\r\n\r\n    return (\r\n        <div className='page'>\r\n            <div className='editable-card'>\r\n                <Card className={classes.root}>\r\n                        <CardMedia\r\n                            className={classes.media}\r\n                            image={spotImage === '' ? 'https://bhmlib.org/wp-content/themes/cosimo-pro/images/no-image-box.png' : spotImage}\r\n                        />\r\n                        <CardContent>\r\n                        <Button onClick={handleAddImageClicked} className='add-image-button' variant=\"contained\">{ isUpdating ? 'Edit Image' : 'Add image'}</Button>\r\n                            <TextField className='inputs' id='standard-basic' label='Name' onChange={(event => setSpotName(event.target.value))} value={spotName}/>\r\n                            <TextField className='inputs' id='standard-basic' label='Description' onChange={(event => setSpotDescription(event.target.value))} value={spotDescription}/>\r\n                            \r\n                            { isUpdating ? null :\r\n                                <Fragment>\r\n                                <FormControlLabel\r\n                                className='use-location-switch'\r\n                                control={\r\n                                    <Switch                                    \r\n                                        name=\"checkedB\"\r\n                                        checked={useCurrentLocation}\r\n                                        onChange={handleUseCurrentLocationChanged}\r\n                                        color=\"primary\"\r\n                                    />\r\n                                    }\r\n                                    label=\"Use current location\"\r\n                                    />\r\n                                    {useCurrentLocation ? \r\n                                        null :\r\n                                        <TextField \r\n                                        className='inputs' \r\n                                        id='standard-basic' \r\n                                        label='Location' \r\n                                        onChange={event => setSpotLocation(event.target.value)}/>}\r\n                                </Fragment>\r\n                            }\r\n                        </CardContent>\r\n                </Card>\r\n            </div>\r\n            <Link to='/the-spot/' style={{ textDecoration: 'none' }}>\r\n                <Fab disabled={(spotName === '' || spotLocation === '') ? true : false} onClick={() => {\r\n                    if(isUpdating) {\r\n                        fetch(`https://the-spot01.herokuapp.com/update-spot/${currentUser}`, {\r\n                            method: 'put',    \r\n                            headers: {'Content-Type': 'application/json'},\r\n                            body: JSON.stringify({\r\n                                id: id,\r\n                                title: spotName,\r\n                                description: spotDescription, \r\n                                image: spotImage === '' ? 'https://bhmlib.org/wp-content/themes/cosimo-pro/images/no-image-box.png' : spotImage, \r\n                                coords: spotLocation,\r\n                                dateCreated: dateCreated\r\n                            })\r\n                        })\r\n                        .then(response => response.json())\r\n                        .catch(err => console.log(err))\r\n                    } else {\r\n                            // add spot to db\r\n                            fetch(`https://the-spot01.herokuapp.com/add-spot/${currentUser}`, {\r\n                                method: 'post',    \r\n                                headers: {'Content-Type': 'application/json'},\r\n                                body: JSON.stringify({\r\n                                    title: spotName, \r\n                                    description: spotDescription, \r\n                                    image: spotImage === '' ? 'https://bhmlib.org/wp-content/themes/cosimo-pro/images/no-image-box.png' : spotImage, \r\n                                    coords: spotLocation\r\n                                })\r\n                            })\r\n                            .then(response => response.json())\r\n                            .catch(err => console.log(err))\r\n                        }\r\n                    }\r\n                    }\r\n                     color='primary' className='done-button' variant=\"extended\">\r\n                Done\r\n                </Fab>\r\n            </Link>\r\n            { isUpdating ?\r\n                <Link to='/the-spot/' style={{ textDecoration: 'none' }}>\r\n                    <Button className='remove-spot-button' onClick={() => {\r\n                            fetch(`https://the-spot01.herokuapp.com/remove-spot/${currentUser}`, {\r\n                                method: 'delete',\r\n                                headers: {'Content-Type': 'application/json'},\r\n                                body: JSON.stringify({\r\n                                    id: id\r\n                                })\r\n                            })\r\n                            .then(response => response.json())\r\n                            .catch(err => console.log(err))\r\n                            }\r\n                        }\r\n                        color='secondary'>\r\n                    Remove Spot\r\n                    </Button>\r\n                </Link>\r\n            : null }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddSpot;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../SharedComponentStyles/CardForm.css';\r\nimport { changeCurrentUser } from '../../actions';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst SignIn = _ => {\r\n    const [signInEmail, setSignInEmail] = useState('');\r\n    const [signInPassword, setSignInPassword] = useState('');\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSignIn = _ => {\r\n        fetch('https://the-spot01.herokuapp.com/sign-in', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: signInEmail,\r\n                password: signInPassword\r\n            })\r\n        })\r\n        .then(response => {\r\n            if(response.status < 400) {\r\n                //set current user in redux with email\r\n                dispatch(changeCurrentUser(signInEmail));\r\n                history.push('/the-spot');\r\n            } else {\r\n                alert('Please provide a valid/verified email and password.')\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className='action-container'>\r\n            <Card className='action-card'>\r\n                <CardContent>\r\n                    <h1>Sign In</h1>\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: '',\r\n                            password: ''\r\n                        }}\r\n                        onSubmit={async values => alert(JSON.stringify(values))}\r\n                    >\r\n                        <Form>\r\n                            <TextField className='inputs action-text-field' id='standard-basic' label='Email' type='email' onChange={event => setSignInEmail(event.target.value)}/>\r\n                            <TextField className='inputs action-text-field' id='standard-basic' label='Password' type='password' onChange={event => setSignInPassword(event.target.value)}/>\r\n                            <div className='card-buttons-container'>\r\n                                <div>\r\n                                    {/* <Link to='/the-spot/' style={{ textDecoration: 'none' }}> */}\r\n                                        <Fab onClick={handleSignIn} color='primary' className='main-action-button' variant=\"extended\">\r\n                                            Sign In\r\n                                        </Fab>\r\n                                    {/* </Link> */}\r\n                                </div>\r\n                                <div>\r\n                                    <Link to='/the-spot/register' style={{ textDecoration: 'none', color: 'black' }}>\r\n                                        <p>Register</p>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    </Formik>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Link } from 'react-router-dom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport '../SharedComponentStyles/CardForm.css';\r\n\r\nconst Register = _ => {\r\n    const [registerName, setRegisterName] = useState('');\r\n    const [registerEmail, setRegisterEmail] = useState('');\r\n    const [registerPassword, setRegisterPassword] = useState('');\r\n    const [registered, setRegistered] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const handleRegister = _ => {\r\n        fetch('https://the-spot01.herokuapp.com/register', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                name: registerName,\r\n                email: registerEmail,\r\n                password: registerPassword\r\n            })\r\n        })\r\n        .then(response => {\r\n            if(response.status < 400) {\r\n                setRegistered(true);\r\n            } else {\r\n                alert('Please provide a valid email that is not in use.')\r\n            }\r\n        })\r\n        .catch(err => alert('Could not register user'))\r\n    }\r\n\r\n    return (\r\n        <div className='action-container'>\r\n        { registered ? \r\n        <h2>Please check your email and click on the link to verify your account.</h2> :\r\n        <Card className='action-card'>\r\n            <CardContent>\r\n                <h1>Register</h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: ''\r\n                    }}\r\n                    onSubmit={async values => alert(JSON.stringify(values))}\r\n                >\r\n                    <Form>\r\n                        <TextField className='inputs action-text-field' id='standard-basic' label='Name' type='name' onChange={event => setRegisterName(event.target.value)}/>\r\n                        <TextField className='inputs action-text-field' id='standard-basic' label='Email' type='email' onChange={event => setRegisterEmail(event.target.value)}/>\r\n                        <TextField className='inputs action-text-field' id='standard-basic' label='Password' type='password'  onChange={event => setRegisterPassword(event.target.value)}/>\r\n                        <div className='card-buttons-container'>\r\n                            <div>\r\n                                {/* <Link to='/the-spot/' style={{ textDecoration: 'none' }}> */}\r\n                                    <Fab onClick={handleRegister} color='primary' className='main-action-button' variant=\"extended\">\r\n                                        Register\r\n                                    </Fab>\r\n                                {/* </Link> */}\r\n                            </div>\r\n                            <div>\r\n                                <Link to='/the-spot/sign-in' style={{ textDecoration: 'none', color: 'black' }}>\r\n                                    <p>Sign In</p>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </Formik>\r\n            </CardContent>\r\n        </Card>\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport AddSpot from '../AddSpot/AddSpot';\r\nimport { Link } from 'react-router-dom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\nimport './UpdateSpot.css';\r\n\r\nconst UpdateSpot = () => {\r\n    const query = new URLSearchParams(window.location.search);\r\n    const id = query.get('id') || '';\r\n    const name = query.get('name') || '';\r\n    const description = query.get('description') || '';\r\n    const image = query.get('image') || '';\r\n    const coords = query.get('coords') || '';\r\n    const dateCreated = query.get('dateCreated') || '';\r\n\r\n    return (\r\n        <div>\r\n            <AddSpot id={id} name={name} description={description} image={image} coords={coords} dateCreated={dateCreated} isUpdating={true}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateSpot;","import React, {Fragment} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './SpotCard.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: '100%',\r\n    },\r\n    media: {\r\n        height: 150,\r\n    },\r\n});\r\n\r\nconst SpotCard = ({ id = '', title = '', description = '', image = '', coords, dateCreated = '' }) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div onClick={() => {history.push(`/the-spot/update-spot?id=${id}&name=${title}&description=${description}&image=${image}&coords=${coords}&dateCreated=${dateCreated}`)}} className='card-container'>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={image}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            {title}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button target='_blank' href={`https://www.google.com/maps/place/${coords}`} size=\"small\" color=\"primary\">\r\n                        View Location\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpotCard;","import React from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './AddSpotButton.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    extendedIcon: {\r\n      marginRight: theme.spacing(1),\r\n    }\r\n  }));\r\n\r\nconst AddSpotButton = _ => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Fab className='floating-add-spot' variant=\"extended\">\r\n            <AddIcon className={classes.extendedIcon} />\r\n        Add a Spot\r\n        </Fab>\r\n    );\r\n}\r\n\r\nexport default AddSpotButton;","import React, {useState, Fragment} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport { changeSearch, changeCurrentUser } from '../../actions';\r\nimport { Link } from 'react-router-dom';\r\nimport { dispatch } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(1),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: '20ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\nconst NavBar = () => {\r\n    const classes = useStyles();\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n    const dispatch = useDispatch();\r\n    \r\n    const handleSearchChange = event => {\r\n        dispatch(changeSearch(event.target.value));\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n                <AppBar style={{background: 'white', color: 'black' }} position=\"sticky\">\r\n                <Toolbar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                    onClick={() => drawerOpen ? setDrawerOpen(false) : setDrawerOpen(true)}\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    My Spots\r\n                </Typography>\r\n                <div className={classes.search}>\r\n                    <div className={classes.searchIcon}>\r\n                    <SearchIcon />\r\n                    </div>\r\n                    <InputBase\r\n                    placeholder=\"Search your spots\"\r\n                    classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                    }}\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                    onChange={handleSearchChange}\r\n                    />\r\n                </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer anchor={\"left\"} open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n                <Link onClick={() => { dispatch(changeCurrentUser('')) }} to='/the-spot/sign-in' style={{textDecoration: 'none', color: 'black'}}>\r\n                    <h2 style={{paddingLeft: '15px', paddingRight: '60px', cursor: 'pointer'}}>Sign out</h2>\r\n                </Link>\r\n            </Drawer>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { useEffect } from 'react';\r\nimport SpotCard from '../SpotCard/SpotCard';\r\nimport AddSpotButton from '../AddSpotButton/AddSpotButton';\r\nimport NavBar from '../NavBar/NavBar';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { setSpotList } from '../../actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst Spots = _ => {\r\n    const spotList = useSelector(state => state.modifySpotList.spotList);\r\n    const searchText = useSelector(state => state.changeSearch.searchText);\r\n    const currentUser = useSelector(state => state.changeCurrentUser.currentUserEmail);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n  \r\n    useEffect(() => {\r\n      if(!currentUser) {\r\n        console.log('No current user detected, redirecting to sign in');\r\n        if(history)\r\n          history.push('/the-spot/sign-in');\r\n      }\r\n      if(currentUser) {\r\n        fetch(`https://the-spot01.herokuapp.com/get-spots/${currentUser}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          dispatch(setSpotList(data));\r\n        })\r\n        .catch(err => console.log(err))\r\n      }\r\n    })\r\n\r\n    const DisplaySpots = props => {\r\n        if (props.list.length === 0) {\r\n            return <p style={{ textAlign: 'center', marginTop: '15%', fontSize: '1.5rem' }}>No spots found, <Link to='/the-spot/add-spot' style={{ color: 'black' }}><strong>add one now!</strong></Link></p>\r\n        } else if (props.list.length > 0) {\r\n            return props.list.map(spot => {\r\n                return (\r\n                    <SpotCard id={spot.id} title={spot.title} description={spot.description} image={spot.image} coords={spot.coords} dateCreated={spot.dateCreated} />\r\n                );\r\n            })\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <p className='recent-spots'>Recently added</p>\r\n            <div id='spots-grid' className={spotList.length === 0 ? '' : 'spots-grid'}>\r\n                {(searchText === '' || searchText === undefined) ?\r\n                    <DisplaySpots list={spotList} /> :\r\n                    <DisplaySpots list={spotList.filter(spot => {\r\n                        return (spot.title.toLowerCase().includes(searchText.toLowerCase()) || spot.description.toLowerCase().includes(searchText.toLowerCase()));\r\n                    })} />}\r\n            </div>\r\n            <Link to='/the-spot/add-spot'><AddSpotButton /></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spots;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport AddSpot from './components/AddSpot/AddSpot';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport UpdateSpot from './components/UpdateSpot/UpdateSpot';\nimport Spots from './components/Spots/Spots';\n\nexport default function App() {\n    return (\n      <Router>\n          <Switch>\n            <Route exact path='/the-spot'>\n              <Spots />\n            </Route>\n            <Route path='/the-spot/add-spot'>\n              <AddSpot />\n            </Route>\n            <Route path='/the-spot/update-spot'>\n              <UpdateSpot />\n            </Route>\n            <Route path='/the-spot/sign-in'>\n              <SignIn />\n            </Route>\n            <Route path='/the-spot/register'>\n              <Register />\n            </Route>\n          </Switch>\n      </Router>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    ADD_SPOT,\r\n    CHANGE_SEARCH,\r\n    UPDATE_SPOT,\r\n    REMOVE_SPOT,\r\n    CHANGE_CURRENT_USER,\r\n    SET_SPOT_LIST\r\n} from './constants';\r\n\r\n//for now before DB integration\r\n\r\nconst findObjectByTitleReturnIndex = (list, object) => {\r\n    let index = 0;\r\n    for (let spot of list) {\r\n        if(spot.title === object.title) {\r\n            break;\r\n        }\r\n        else {\r\n            index++;\r\n        }\r\n    }\r\n    return index;\r\n}\r\n\r\nconst initialStateSpotList = {\r\n    spotList: []\r\n}\r\n\r\nexport const modifySpotList = (state = initialStateSpotList, action) => {\r\n    switch (action.type) {\r\n        case ADD_SPOT:\r\n            return {...state, spotList: [action.payload, ...state.spotList]};\r\n        case UPDATE_SPOT:\r\n            let updatedList = state.spotList;\r\n            const updateAtIndex = findObjectByTitleReturnIndex(state.spotList, action.payload);\r\n            updatedList[updateAtIndex] = action.payload;\r\n            return {...state, spotList: updatedList};\r\n        case REMOVE_SPOT:\r\n            let removedList = state.spotList;\r\n            const removeAtIndex = findObjectByTitleReturnIndex(state.spotList, action.payload);\r\n            removedList.splice(removeAtIndex, 1);\r\n            return {...state, spotList: removedList}\r\n        case SET_SPOT_LIST:\r\n            return {...state, spotList: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialSearchText = {\r\n    searchText: ''\r\n};\r\n\r\nexport const changeSearch = (state = initialSearchText, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH:\r\n            return {...state, searchText: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialCurrentUser = {\r\n    currentUserEmail: ''\r\n};\r\n\r\nexport const changeCurrentUser = (state = initialCurrentUser, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_CURRENT_USER:\r\n            return {...state, currentUserEmail: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { modifySpotList, changeSearch, changeCurrentUser } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst persistedState = loadFromLocalStorage();\n\nconst rootReducer = combineReducers({modifySpotList, changeSearch, changeCurrentUser});\nconst store = createStore(rootReducer, persistedState, composeWithDevTools());\n\nfunction saveToLocalStorage(state) {\n  // try/catch if local storage in browser NA\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction loadFromLocalStorage() {\n  // try/catch if local storage in browser NA\n  try {\n    const serializedState = localStorage.getItem('state');\n    // return undefined instead of null becasue redux doe snot accept\n    // null value\n    if (serializedState === null) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\n\n// everytime store changed, save state to local storage\nstore.subscribe(() => saveToLocalStorage(store.getState()))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}